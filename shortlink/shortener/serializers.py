"""
This module contains all serializers for the shortener app
"""
from rest_framework import serializers

from shortener import views


class URLObjectSerializer(serializers.Serializer):
    """
    Serializer for the URL class in models.py
    This is used to convert the URL objects to JSON
    """
    long_version = serializers.URLField()
    short_version = serializers.URLField()
    created_at = serializers.DateTimeField()


class LongURLSerializer(serializers.Serializer):
    """
    Serializer for long urls, used for validating urls send in post
    body to /encode
    """
    url = serializers.URLField(required=True)

    def validate_url(self, url):
        """
        ensures url is long enough, otherwise the "shortened"
        versions may turn out to be longer than the "long" url!

        ensures that the url hasn't been entered in the system before
        to avoid duplicates
        """
        if len(url) <= 30:
            raise serializers.ValidationError('This URL is pretty short! Why shorten it?')
        elif url in [url.long_version for url in views.urls_dict.values()]:
            raise serializers.ValidationError('This URL already exists in the system!')
        return url

    def validate(self, attrs):
        """
        makes sure there is enough space for storing
        another url
        """
        if len(views.urls_dict) == int('ZZZZZZZZ', 36):
            raise serializers.ValidationError('Sorry! I cannot encode this URL. I am full!')
        return attrs


class ShortURLSerializer(serializers.Serializer):
    """
    Serializer for a short urls, used for validating urls
    send to /decode as a string query parameter

    Max length is 30 because http://localhost:8000/ is 22 characters long
    and I limit the number of of digits in base 36 to 8, so the maximum
    length of a url generated by my api is 30
    """
    url = serializers.URLField(required=True, max_length=30)
